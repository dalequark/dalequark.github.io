<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title>Unquarked</title>
    <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
		<icon>/apple-touch-icon-precomposed.png</icon>
    <subtitle>A place for the ramblings of Dale</subtitle>
    <link href="/atom.xml" rel="self"/>
    <link href="/" rel="alternate" type="text/html"/>
    <updated>2014-12-02T20:58:08-05:00</updated>
    <id>/</id>
    <author>
			<name></name>
			<uri>/</uri>
			
		</author>

    
    <entry>
        <title>A Simple Wristwatch</title>
        <link href="/a-simple-wristwatch/"/>
        <updated>2014-11-28T01:57:01-05:00</updated>
        <id>/a-simple-wristwatch</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	
        	&lt;p&gt;In an attempt to master Eagle and surface-mount soldering, I decided to
design a simple LED wristwatch with as small a footprint as I could manage.
As you can see in this &lt;a href=&quot;/files/wristwatch.sch&quot;&gt;schematic&lt;/a&gt; (board files
  &lt;a href=&quot;/files/wristwatch1.brd&quot;&gt;here&lt;/a&gt;), the
watch runs on an ATMega328P.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wristwatchschematic.png&quot; alt=&quot;schematic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I chose this chip because it’s the same chip
in an Arduino Uno, and there are many tutorials online for how to upload
code to it via an &lt;a href=&quot;http://arduino.cc/en/Tutorial/ArduinoISP&quot;&gt;Arduino ISP&lt;/a&gt;. I
also decided to use a real time clock with a built-in crystal to keep time. This
RTC is pretty expensive ($8 on mouser?), but keeps time extremely accurately. On
V2, I might use a cheaper RTC or forgo the RTC and add a 16Mhz crystal instead.
At the present, the Arduino is designed to use its own internal 8Hz oscillator as a clock.&lt;/p&gt;

&lt;p&gt;I meticulously reviewed the schematics and printed 3 boards for around $10 from
OSHPark.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wristwatchboards.jpg&quot; alt=&quot;oshpark&quot; /&gt;
Nonetheless, I found after soldering 90% of the components that &lt;strong&gt;the schematic is broken&lt;/strong&gt;!
There’s a whole row of LED’s that are connected to nothing,
and there’s no easy way to get at the clock pin. I tried bootloading the thing
with an Arduino, but haven’t had success yet.  News to come with V2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bootloading.jpg&quot; alt=&quot;bootloading&quot; /&gt;&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>Neuromancer</title>
        <link href="/neuromancer/"/>
        <updated>2014-11-28T00:52:18-05:00</updated>
        <id>/neuromancer</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;/images/joe_eeg_feature.jpg&quot;&gt;&lt;br/&gt;
        	

        </content>
    </entry>
    
    <entry>
        <title>CamSense: An Emotion-Controlled Camera</title>
        <link href="/camsense-an-emotion-controlled-camera/"/>
        <updated>2014-11-26T17:06:39-05:00</updated>
        <id>/camsense-an-emotion-controlled-camera</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;/images/camsense_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;For Fall HackPrinceton ‘14, Joe, Lucas and I made a camera that was triggered
via spikes in electrodermal response. It worked super well! See the demo below or check
out the
&lt;a href=&quot;http://www.instructables.com/id/CamSense-An-Emotion-Triggered-Camera/&quot;&gt;instructables&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/Y5tTZEzH844&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

        </content>
    </entry>
    
    <entry>
        <title>Adventures in DIY EEG Land</title>
        <link href="/DIY-EEG/"/>
        <updated>2014-09-30T00:00:00-04:00</updated>
        <id>/DIY-EEG</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;/images/joe_eeg_feature.jpg&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;I always thought that mind reading was pretty amazing, and volunteered for
all sorts of campus psych studies involving EEG and fMRI. That’s how I got
this lovely picture of my brain, as well as the same picture in 3D.  At the beginning of the summer, though, I learned that was (no pun) mind-blowing.  It’s possible to mind-read for less than $20.  So began my journey into DIY EEG tech.  &lt;/p&gt;

&lt;p&gt;Our thoughts stir a whirlwind of electrical activity along our scalps.  Engagement, meditation, sleep, and even the subjects of our thoughts create faint but real electrical patterns that we can measure non-intrusively by placing electrodes on our scalps.  Electroencephalographs or EEGs do just this, creating a timeseries of voltage levels distributed in space along the head.  Sometimes, our thoughts manifest themselves as distinct frequencies in these voltages. For example (DATA HERE).  Other times, the mappings between EEG and our thoughts are too complicated for us to discern simply by frequency analysis, and we must apply machine learning techniques to map EEG data to states of mind.  The biggest problem neuroscientists face in interpreting EEG data is not hwo to interpret it, though, but how to tease brain data out from noisy signals.  In the past, it would have been impossible for a hobbyist to make a quality EEG simply because a DIY EEG would be cursed with a terrible signal-to-noise ratio, from noise in 60Hz frequencies of power lines (in the US), from eyeblink movements and facial expressions.  Today, this is still the primary problem a hobbyist faces, but hardware and software have come together to improve SNR’s.  Since June, I’ve investigated in depth EEG options availible to hobbyists, and this is my DIY EEG review.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DIY EEG’s
    &lt;ul&gt;
      &lt;li&gt;Single Channel&lt;/li&gt;
      &lt;li&gt;EEGMouse&lt;/li&gt;
      &lt;li&gt;OpenBCI&lt;/li&gt;
      &lt;li&gt;Electrodes
        &lt;ul&gt;
          &lt;li&gt;Canada electrodes + 10/20 Paste vs Flour&lt;/li&gt;
          &lt;li&gt;Pennies&lt;/li&gt;
          &lt;li&gt;Sticky&lt;/li&gt;
          &lt;li&gt;Holster?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Out of the Box EEG’s
    &lt;ul&gt;
      &lt;li&gt;Mindwave, etc&lt;/li&gt;
      &lt;li&gt;Emotiv&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

        </content>
    </entry>
    
    <entry>
        <title>BeagleCache: A Network Accelerator for the Developing World</title>
        <link href="/BeagleCache/"/>
        <updated>2014-08-20T00:00:00-04:00</updated>
        <id>/BeagleCache</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	
        	

        </content>
    </entry>
    
    <entry>
        <title>Infrasonic Pixel Necklace</title>
        <link href="/pixel-necklace/"/>
        <updated>2014-07-28T00:00:00-04:00</updated>
        <id>/pixel-necklace</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	
        	&lt;p&gt;One of my favorite projects was this pixel necklace.
Adafruit link
http://www.adafruit.com/blog/2014/11/19/glowy-necklace-made-from-headphone-cable-wearablewednesday/
http://www.instructables.com/id/Electronics-Necklace-from-Headphone-Cable/?embed=flash&lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>SRON: A Software-Defined Overlay Network</title>
        <link href="/SRON/"/>
        <updated>2014-05-20T00:00:00-04:00</updated>
        <id>/SRON</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;/images/sron.png&quot;&gt;&lt;br/&gt;
        	&lt;p&gt;During the Spring semester of my junior year, I decided to do a research project
with Professor &lt;a href=&quot;http://www.cs.princeton.edu/~jrex/&quot;&gt;Jen Rexford&lt;/a&gt;, who is not only
a networking God but also probably the best advisor one can over hope to work with.
We worked together on a Software-Defined Networking project called
&lt;em&gt;SRON: A Software-Defined Overlay Network&lt;/em&gt;. I had never done research in
networking before, as usually I work on projects that involve working with
physical hardware devices.  Nonetheless, I learned a bunch from all of the obstacles
I faced in building SRON, from basic network programming to how to deal with
distributed computing problems like timing events across a distributed system.
And, not to brag, but I thought of some “neat” solutions to these problems
that you can read about in my &lt;a href=&quot;/files/SRON_whitepaper.pdf&quot;&gt;paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So what is SRON? In short:&lt;/p&gt;

&lt;p&gt;SRON is software written in the network
programming language &lt;a href=&quot;http://www.frenetic-lang.org/pyretic/&quot;&gt;Pyretic&lt;/a&gt; that allows internet service
providers to create an &lt;a href=&quot;http://en.wikipedia.org/wiki/Overlay_network&quot;&gt;overlay network&lt;/a&gt; over their physical
network to help them better respond to routing outages, congestion, and more. In
particular, internet service providers (ISPs) can often monitor the routers within their
networks well, but once network traffic leaves their domain and is handed off
to a second ISP, the original ISP cannot easily monitor routing performance.
SRON allows a single ISP to monitor the latencies of various paths throughout
the Internet, even those paths that might cross through many ISP domains, and
to dynamically alter routing rules based on those latencies.  &lt;/p&gt;

        </content>
    </entry>
    
    <entry>
        <title>A Robot for Scanning Rooms in 3D</title>
        <link href="/Capturing-Pointcloud/"/>
        <updated>2013-08-20T00:00:00-04:00</updated>
        <id>/Capturing-Pointcloud</id>
        <author>
					<name></name>
					<uri>/</uri>
					
				</author>
        <content type="html">
        	&lt;img src=&quot;/images/point_cloud_feature.gif&quot;&gt;&lt;br/&gt;
        	

        </content>
    </entry>
    
</feed>