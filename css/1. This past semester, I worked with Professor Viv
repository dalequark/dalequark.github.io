1. This past semester, I worked with Professor Vivek Pai to develop a low-cost caching proxy for deployment in the developing world.  This research was inspired by the release of the BeagleBone Black (BBB), a $45 ARM-based computer with 2GB of onboard eMMC memory. The BBB is an exciting platform because it performs as well as but is significantly cheaper than most of today’s low-cost laptops.  In the past, Pai and his research group had deployed caching proxies with small resource footprints with the goal of accelerating internet speeds in an area where Internet access can be prohibitively expensive and slow.  However, because computers are so valuable in these regions, the caching proxies were forced to run alongside other applications on a single box, and thus had to maintain only a small resource footprint.  The BBB solves this problem; at the size of a credit card, we could install a fully-configured caching proxy that had access to all of the BBB’s resources and ship it abroad cheaply and easily.

The goal of my research project was to evaluate the performance of the BBB as a caching proxy, and in particular, to see if it could perform well enough to provide cost-effective Internet acceleration to countries with limited bandwidths.  A secondary interest of ours was how the onboard eMMC flash memory would perform, as this type of memory has not been studied under such applicatoins before.

Throughout this project, some of the challenges I faced were figuring out how to work effectively with the BBB.  For example, because I was installing an operating system on the eMMC flash, which can survive only a limited number of reads and writes, I had to consider what types of filesystems would be most efficient and would be compatible with the operating system I was using (ultimately, I decided on an ext4 filesystem without journaling paired with Arch Linux).  Secondly, I had to be cognizant of the resource footprint of my software.  When you only have 2GB of disk and are testing the performance of a memory-intensive program like a caching proxy, a 1.2GB operating system is quite a large investment!  

The bigger challenges, though, came after I had set up my software stack (a combination of the open-source caching proxy Polipo, a Node.js webserver, and the Siege benchmarking utility).  As I began testing the throughput of the BBB with an increasing load, I began to find all sorts of results I didn't expect and couldn't explain.  I was running tests that would take hours to complete, and so "debugging" them was quite the challenge.  At one point, it wasn't until I looked at individual packets at the TCP level that I understood why my results were so strange and figured out what I had been doing wrong.

All in all, my research experience gave me confidence that I would like continue working in academia.  I am excited to start a new project in the Spring on Software-Defined Networking with Jennifer Rexford.